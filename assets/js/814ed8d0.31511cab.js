"use strict";(self.webpackChunkdigital_travellers=self.webpackChunkdigital_travellers||[]).push([[454],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),h=r,u=m["".concat(l,".").concat(h)]||m[h]||p[h]||i;return n?o.createElement(u,a(a({ref:t},d),{},{components:n})):o.createElement(u,a({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6082:(e,t,n)=>{n.d(t,{VY:()=>a,H1:()=>o.H1,H2:()=>o.H2,H3:()=>o.H3,H4:()=>o.H4,H5:()=>o.H5,sr:()=>o.sr,rU:()=>o.rU,xv:()=>o.xv});var o=n(6554),r=n(7294);const i=["Where travel and documentation meet innovation!","Discover the future of travel documentation!","Step into the future of seamless travel docs!","Don't let documentation hold you back from travel!"],a=()=>r.createElement(o.W2,null,r.createElement(o.H1,{content:i[Math.floor(Math.random()*i.length)]}),r.createElement(o.xv,{content:r.createElement(r.Fragment,null,"Welcome to our docs! Feel free to contribute or open an issue in our"," ",r.createElement(o.rU,{target:"_blank",href:"https://github.com/digital-travellers/docs/issues"},"repo"),"!")}),r.createElement(o.H3,{content:"\ud83d\udc7e Start point"}),r.createElement(o.sr,{items:[{title:"Working agreements",description:"Our organization working agreements!",to:"/docs/working-agreements"},{title:"Modifying the docs",description:"Want to change anything? Read this to have a clearer idea!",to:"/docs/contribution"}]}),r.createElement(o.H3,{content:"\ud83d\uddc4\ufe0f Repositories"}),r.createElement(o.sr,{items:[{title:"Documentation",description:"Documentation about the actual documentation",href:"https://github.com/digital-travellers/docs"},{title:"rst/frontend",description:"Monorepository for our frontend applications",href:"https://github.com/digital-travellers/rst-frontend",titleAsCode:!0},{title:"rst/api-gateway",description:"Repository for our api-gateway backed application",href:"https://github.com/digital-travellers/rts-api-gateway",titleAsCode:!0},{title:"rst/configuration",description:"Repository for our configuration backed application",href:"https://github.com/digital-travellers/rts-configuration",titleAsCode:!0},{title:"rst/notifier",description:"Repository for our notifier backed application",href:"https://github.com/digital-travellers/rts-notifier",titleAsCode:!0},{title:"rst/register",description:"Repository for our register backed application",href:"https://github.com/digital-travellers/rts-register",titleAsCode:!0},{title:"rst/search",description:"Repository for our search backed application",href:"https://github.com/digital-travellers/rts-search",titleAsCode:!0}]}))},6554:(e,t,n)=>{n.d(t,{W2:()=>r,H1:()=>s,H2:()=>l,H3:()=>c,H4:()=>d,H5:()=>m,sr:()=>k,rU:()=>u,xv:()=>g});var o=n(7294);const r=e=>{let{children:t}=e;return o.createElement("div",{className:"container mx-auto"},t)};var i=n(2949);const a=()=>{const{colorMode:e}=(0,i.I)();return"dark"===e?"text-neutral-100":"text-neutral-700"},s=e=>{let{asCode:t,id:n,content:r}=e;const i=a();return o.createElement("h1",{id:n,className:`mb-4 text-4xl font-bold ${i}${t?" font-mono":""}`},r)},l=e=>{let{asCode:t,id:n,content:r}=e;const i=a();return o.createElement("h2",{id:n,className:`mb-4 text-3xl font-bold ${i}${t?" font-mono":""}`},r)},c=e=>{let{asCode:t,id:n,content:r}=e;const i=a();return o.createElement("h3",{id:n,className:`mb-4 text-2xl font-semibold ${i}${t?" font-mono":""}`},r)},d=e=>{let{asCode:t,id:n,content:r}=e;const i=a();return o.createElement("h4",{id:n,className:`mb-2 text-xl font-semibold ${i}${t?" font-mono":""}`},r)},m=e=>{let{asCode:t,id:n,content:r}=e;const i=a();return o.createElement("h5",{id:n,className:`mb-2 text-lg font-semibold ${i}${t?" font-mono":""}`},r)};var p=n(7462),h=n(9960);const u=e=>{let{isTitle:t,...n}=e;return o.createElement(h.Z,(0,p.Z)({},n,{className:`hover:text-${t?"gray":"green"}-700${t?" hover:decoration-wavy":""}`,activeClassName:`hover:text-${t?"gray":"green"}-700${t?" hover:decoration-wavy":""}`}))},g=e=>{let{content:t,children:n,noMargin:r}=e;return o.createElement("p",{className:"text-neutral-700 "+(r?"!m-0":"")},t??n)},k=e=>{let{items:t,withSidebar:n}=e;return t.length?o.createElement("div",{className:`grid grid-cols-1 gap-3 lg:grid-cols-${n?"2":"3"} lg:gap-8 md:grid-cols-2 md:gap-6 mb-8`},t.map((e=>{let{title:t,description:n,titleAsCode:r,to:i,href:a}=e;return o.createElement("div",{id:i,className:"py-3 px-4 rounded-lg border border-gray-200 border-solid shadow-lg shadow-gray-100 hover:shadow-gray-200 hover:transition-shadow ease-in-out duration-200"},o.createElement(u,{to:i,href:a,isTitle:!0},o.createElement(d,{content:t,asCode:r})),n?o.createElement(g,{content:n}):null)}))):null}},5331:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var o=n(7462),r=(n(7294),n(3905)),i=n(6082);const a={title:"Working agreements",hide_title:!0,slug:"/working-agreements"},s=void 0,l={unversionedId:"team/working-agreements",id:"team/working-agreements",title:"Working agreements",description:"Working agreements are a set of guidelines that a team agrees to follow in",source:"@site/docs/team/working-agreements.mdx",sourceDirName:"team",slug:"/working-agreements",permalink:"/rts-docs/docs/working-agreements",draft:!1,editUrl:"https://github.com/digital-travellers/docs/tree/main/packages/create-docusaurus/templates/shared/docs/team/working-agreements.mdx",tags:[],version:"current",frontMatter:{title:"Working agreements",hide_title:!0,slug:"/working-agreements"},sidebar:"sidebar",previous:{title:"Documentation",permalink:"/rts-docs/docs/intro"},next:{title:"Contributing to the docs",permalink:"/rts-docs/docs/contribution"}},c={},d="https://github.com/digital-travellers/projects/2/views",m=[],p={toc:m},h="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.H1,{id:"header",content:"Working agreements \ud83e\udd1d",mdxType:"H1"}),(0,r.kt)(i.xv,{mdxType:"Text"},"Working agreements are a set of guidelines that a team agrees to follow in order to work together effectively. Having well-defined working agreements is particularly important for async and remote teams for the following reasons:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Establishes clear communication protocols"),": Working agreements can help establish clear communication protocols, including expectations around response time, communication tools, and channels. This can help ensure that everyone is on the same page and knows how to communicate effectively with each other.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Builds trust"),": Working agreements can help build trust among team members by setting clear expectations and norms around how work is done. This can help foster a sense of accountability and reliability among team members, which is essential for remote and async teams where there is less opportunity for in-person interactions.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Improves collaboration"),": Working agreements can help improve collaboration by establishing clear roles and responsibilities, including expectations aroun participation in meetings and decision-making processes. This can help ensure that everyone is working towards the same goals and that there is no confusion or duplication of efforts.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Increases productivity"),": Working agreements can help increase productivity by reducing the time and effort spent on coordination and communication. When everyone is on the same page and knows what is expected of them, work can proceed more efficiently and effectively."))),(0,r.kt)(i.H2,{id:"communication",content:"Communication",mdxType:"H2"}),(0,r.kt)(i.xv,{mdxType:"Text"},"It has been agreed to meet bi-weekly with our mentor (",(0,r.kt)("code",null,"@mangasf"),") through Google Meet. The meeting link will be sent in our discord channel before starting the meeting. Additionally, the developers will meet regularly in order to ensure a proper collaboration and that the project is progressing as expected.",(0,r.kt)("br",null),"In order to maximize the effectiveness of team meetings, it's important for all developers to attend whenever possible. Additionally, if any deadlines or homework are assigned prior to a meeting, developers should make every effort to meet those requirements before the meeting takes place. This helps to ensure that the meeting can be as productive and efficient as possible, and that everyone is fully prepared to participate and contribute to the discussion."),(0,r.kt)(i.H2,{id:"development",content:"Development",mdxType:"H2"}),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)(i.xv,{mdxType:"Text"},"First time hearing about GitHub projects? Make sure to read this official guide: ",(0,r.kt)(i.rU,{href:"https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/quickstart-for-projects",mdxType:"Link"},"Official GitHub Projects Documentation"))),(0,r.kt)(i.H3,{id:"one-project",content:"One project to rule them all",mdxType:"H3"}),(0,r.kt)(i.xv,{mdxType:"Text"},"To increase visibility into the progress of our project, we have made the decision to create a single shared project that can be accessed by everyone involved, from developers to mentors. This approach will allow for a clearer and more comprehensive view of the project's progress, enabling all team members to stay informed and up-to-date. By centralizing our project management in this way, we can ensure that everyone is working towards the same goals and has a better understanding of how their contributions fit into the larger picture.",(0,r.kt)("br",null)),(0,r.kt)("admonition",{type:"info"},(0,r.kt)(i.xv,{mdxType:"Text"},"You can find the project here: "," ",(0,r.kt)(i.rU,{href:"https://github.com/orgs/Digital-Travellers/projects/2/",mdxType:"Link"},(0,r.kt)("code",null,"DTBoard")))),(0,r.kt)(i.H4,{id:"project-views",content:"Project views",mdxType:"H4"}),(0,r.kt)(i.xv,{mdxType:"Text"},"Here's an explanation for the different views:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)(i.rU,{href:`${d}/3`,mdxType:"Link"},"Board"),": This view contains a typical scrum/kanban board. The goal of this view is to provide visibility to the active tickets as well as those that are in the backlog. Regarding the different colums, their are a reference to the status of the ticket, which is explained more in depth in the next sections.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)(i.rU,{href:`${d}/1`,mdxType:"Link"},"Backlog"),": This view will contain a list of the tickets that are in the backlog, giving more visibility to the tickets that are yet to be done and not in the ready status."))),(0,r.kt)(i.H4,{id:"ticket-fields",content:"Ticket fields",mdxType:"H4"}),(0,r.kt)(i.xv,{mdxType:"Text"},"To improve the efficiency and clarity of our ticketing system, it's important that all tickets are properly tagged with the corresponding labels. This ensures that team members can quickly and easily understand the nature of each ticket, without having to read through lengthy descriptions or search for relevant information. By using clear and consistent labelling, we can streamline our workflow and reduce the time and effort required to manage tickets. So be sure to tag your tickets carefully and accurately to ensure that everyone has the information they need to get the job done right."),(0,r.kt)(i.H5,{id:"ticket-fields-status",content:"Status",mdxType:"H5"}),(0,r.kt)(i.xv,{mdxType:"Text"},"The status of a ticket is a quick and easy way to understand where a particular task or issue stands in the overall workflow. It provides a clear indication of whether the ticket is open or closed, in progress or waiting for action, and so on."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Backlog"),": Tickets awaiting priorization")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Ready"),": Tickets ready for work to begin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"In Progress"),": Ticket actively being worked on")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"In review"),": Tickets awaiting review or approval")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Done"),": Task completed and closed"))),(0,r.kt)(i.H5,{id:"ticket-fields-project",content:"Project",mdxType:"H5"}),(0,r.kt)(i.xv,{mdxType:"Text"},"The project field is none other than the repository in which the issue of the ticket has been created. So, basically, we can understand a ticket as an issue of a repository, which will later have a pull request and at some point in the future it will be merged"),(0,r.kt)(i.H5,{id:"ticket-fields-priority",content:"Priority",mdxType:"H5"}),(0,r.kt)(i.xv,{mdxType:"Text"},"The priority label will help us organise and ensure that we, as a team, focus on the same thing. Here's the list of the different priorities and their meaning:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Urgent"),": Requires immediate attention, critical")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"High"),": Important, needs prompt attention")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Medium"),": Requires attention, not urgent")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Low"),": Not critical, can wait")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Trivial"),": Very low priority, negligible impact."))),(0,r.kt)(i.H4,{id:"ticket-development",content:"Ticket development",mdxType:"H4"}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Ticket creation"),": A team member creates a new ticket in the project, describing the task or issue that needs to be addressed. The ticket will include a title, description, and any relevant details or attachments.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Ticket assignment"),": The ticket is assigned to a team member who will be responsible for completing the task or resolving the issue.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Ticket status"),": The ticket is moved to the appropriate status column on the project board, such as ",(0,r.kt)("code",null,"Backlog"),", ",(0,r.kt)("code",null,"Ready"),", or ",(0,r.kt)("code",null,"In Progress")," to indicate its current status in the workflow. Some automation can be done by GitHub Projects, but make sure it switches each state properly.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Work on ticket"),": The team member assigned to the ticket begins work on the task or issue, updating the ticket as needed with comments, attachments, or other relevant information.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Pull requests"),": When the work on the ticket is complete, the team member has to create a pull request (PR) to propose the changes or fixes made to the codebase, tagging the entire team. The PR will reference the original ticket, indicating that it is the solution to the problem described in the ticket. It should also use the ",(0,r.kt)("code",null,"Closes #issue-id")," so that the issue is automatically closed when the PR is merged. Here's more",(0,r.kt)(i.rU,{href:"https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue",mdxType:"Link"},"information"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Review and approval"),": Other team members review the PR, providing feedback, suggestions, and/or approval as appropriate. Once the PR is approved, it is merged into the codebase, resolving the issue described in the original ticket. It is important that no ticket is merged without at least one approval.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.xv,{noMargin:!0,mdxType:"Text"},(0,r.kt)("strong",null,"Closing a ticket"),": The original ticket is closed, indicating that the issue has been resolved and the task is complete."))),(0,r.kt)(i.H3,{id:"repositories",content:"Repositories",mdxType:"H3"}),(0,r.kt)(i.xv,{mdxType:"Text"},"Those who work in a repository will define the working agreements: from the linting and formatting of the code, the merging strategy, the automation of CI/CD tasks and so on.",(0,r.kt)("br",null),"When a new repository is created, make sure to add update the documentation accordingly. More information can be found in ",(0,r.kt)(i.rU,{to:"/docs/contribution",mdxType:"Link"},"here"),"."))}u.isMDXComponent=!0}}]);